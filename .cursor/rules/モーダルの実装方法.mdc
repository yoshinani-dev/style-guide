---
description: 
globs: *.tsx
alwaysApply: false
---
# モーダルの実装方法

オーナー: テック司令塔

## 利用サンプルコード

```tsx
  const { ModalProvider, ...accountFormModalProps } = useModal()
  
  return (
      <ModalProvider {...accountFormModalProps}>
        <AccountFormModal />
      </ModalProvider>
  )
```

```tsx

export function AccountFormModal() {
  const { isOpen, setOpen } = useModalState()

  return (
    <Dialog open={isOpen} onOpenChange={setOpen}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>ダイアログ</DialogTitle>
        </DialogHeader>
        ...
      </DialogContent>
    </Dialog>
  )
}
```

## 解説

モーダルの状態管理をプロバイダーによって行い `useModalState`経由で状態を取得する方針。

## 自作hooks

```tsx
import type { Dispatch, PropsWithChildren, SetStateAction } from "react"
import { createContext, useCallback, useContext, useState } from "react"

interface IModalContext {
  isOpen: boolean
  setOpen: Dispatch<SetStateAction<boolean>>
  open: () => void
  close: () => void
}
const ModalContext = createContext<IModalContext | undefined>(undefined)

const ModalProvider = ({
  children,
  close,
  isOpen,
  open,
  setOpen,
}: IModalContext & PropsWithChildren) => {
  return (
    <ModalContext.Provider value={{ isOpen, setOpen, open, close }}>
      {children}
    </ModalContext.Provider>
  )
}

export const useModal = () => {
  const [isOpen, setOpen] = useState(false)
  const open = useCallback(() => setOpen(true), [])
  const close = useCallback(() => setOpen(false), [])

  return {
    ModalProvider,
    isOpen,
    setOpen,
    open,
    close,
  }
}

export const useModalState = () => {
  const context = useContext(ModalContext)

  if (!context) {
    throw new Error("useModalState must be used within a ModalProvider")
  }

  return context
}
```