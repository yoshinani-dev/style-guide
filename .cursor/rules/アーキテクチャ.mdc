---
description: 
globs: *.ts
alwaysApply: false
---

# アーキテクチャ

オーナー: 中野 at INFLU

# アーキテクチャパターン

## レイヤー構造

featuresパッケージは以下の3つのレイヤーで構成されています：

- `domain.ts`: ドメインモデルとビジネスロジック
- `repo.ts`: データアクセス層
- `usecase.ts`: ユースケース層

## レイヤーの責務

### domain.ts

- ドメインの型定義
- ドメインロジック（純粋関数）
- バリデーションルール
- 外部依存を持たない

### repo.ts

- データベースアクセス
- 外部APIとの通信
- キャッシュの制御
- トランザクション管理

### usecase.ts

- ユースケースの実装
- 依存性の注入（velona）の使用
- エラーハンドリング
- トランザクションの境界
- ドメインロジックとデータアクセスの調整

## 依存関係

- `usecase` → `repo`, `domain`
- `repo` → `domain`
- `domain` → 依存なし

## ベストプラクティス

1. 各レイヤーの責務を明確に分離する
2. usecaseでは`velona`を使用して依存性を注入する
3. ビジネスロジックは`domain.ts`に集中させる
4. レイヤー間のデータの受け渡しは型定義を活用する
